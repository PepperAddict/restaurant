{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","callback","url","fetch","then","response","json","data","restaurants","slice","catch","err","console","log","id","fetchRestaurants","error","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","together","Object","is","undefined","marker","L","latlng","lat","lng","title","name","alt","urlForRestaurant","addTo","newMap","restMap","address","port","ADDRESS"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\nclass DBHelper {\r\n\r\n  static get ADDRESS() {\r\n    let address = `localhost:8080`;\r\n    return address;\r\n  }\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 8000 // Change this to your server port\r\n    return `http://${this.ADDRESS}/src/data/restaurants.json`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n      let url = 'http://localhost:1337/restaurants/'\r\n      fetch(url)\r\n      .then((response) => {\r\n          return response.json();\r\n      })\r\n      .then((data) => {  \r\n        const restaurants = data.slice(0, 10);\r\n        callback(null, restaurants);\r\n      })\r\n      .catch((err) => {\r\n          console.log(err);\r\n        });\r\n  }\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    //fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    let photograph = restaurant.photograph;\r\n    let id = restaurant.id;\r\n    let together = Object.is(photograph, undefined) ? id : photograph;\r\n    return `build/images/${together}`;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForMain(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(newMap);\r\n    return marker;\r\n  } \r\n\r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(restMap);\r\n    return marker;\r\n  } \r\n\r\n}\r\n"]}