= Mobile Web Specialist Certification Course

== Welcome to my Restaurant Review project

Hello! This is my Udacity Mobile Web Restaurant Review Project! This project was created by Udacity and 
I am required to modify the page by following the guidelines to pass the tests. The project 
is divided into 3 stages and each will have their own requirement. 

=== Restaurant Review Stage 3
* Functionality 
** [ ] User Interface - Users are able to mark a restaurant as a favorite, this toggle is visible
in the application. A form is added to allow users to add their own reviews for a restaurant. Form submission works 
properly and adds a new review to the database.
** [ ] Offline Use - The client application works offline. JSON responses are cached using the indexedDB API. 
Any data previously accessed while connected is reachable while offline. User is able to add a review to a restaurant while offline and the review 
is sent to the server when connectivity is re-established. 

* Responsive Design and Accessibility 
** [ ] Rresponsive Design - The application maintains a responsive design on mobile, tablet and desktop viewports. All new features 
are responsive, including the form to add a review and the control for marking a restaurant as a favorite.
** [ ] Accessibility - The application retains accessibility features from the previous projects. Images have alternative text, the application 
uses appropriate focus management for navigation, and semantic elements and ARIA attributes are used correctly. Roles 
are correctly defined for all elements of the review form. 

* Performance 
** Site Performance - Lighthouse targets for each category exceed: 
*** [ ] Progressive Web App: > 90
*** [ ] Performance: > 90
*** [ ] Accessibility: > 90

=== Restaurant Review Stage 2
* Application Data and Offline Use.
** [x] Application Data Source - Client application should pull restaurant data from the development server, parse
, and use the information to render the appropriate sections of the application UI. 
** [x] Offline Use - The client application works offline. JSON responses are cached 
using IndexedDB API. Any data previously accessed while connected is reachable while offline. 

* Responsive Design and Accessibility 
** [x] Responsive Design - The application maintains a responsive design on mobile, tablet and desktop viewports.
** [x] Accessibility - The application retains accessibility features from Stage 1. Images have alternative text, the application uses appropriate focus managment for navigation, and semantic elements and ARIA attributes are used correctly.

* Performance - Lighthouse targets for each category:
** [x] PWA > 90
** [x] Performance > 70
** [x] Accessibility > 90

=== Restaurant Review Stage 1
This is the current state of the Restaurant Review Project.

* [x] Responsive design - Work well from small screens to large desktop screens.
* [x] Accessibility - Make sure the content have the appropriate names and handling
so users can easily identify and navigate the page.
* [x] Implement Service Worker

== To run the server

Project2 requires 2 servers to run. I've included both servers to run together by typing: *npm run dev*.

=== Python server
* First you need to make sure you actually have python installed and that it's version 2.x
** In the terminal, type `python-V` and you should get a version. 
* Once you confirmed that python is installed and that it's version 2.x , you can easily start a python server
** Type `python -m SimpleHTTPServer 8000` in the project's directory.

NOTE: There has been a reported bug with python servers reading service worker as 
text/plain. What can be done to remedy this is change it to a different server port. If you need to do that, 
you will also need to change the port in `js/dbhelper.js` line 11. 

=== PHP server

* First make sure you have php installed.
** In the terminal, type `php-v` and you should see the version. 
* Once you confirm that you have php installed, you can easily type this in terminal in the project's directory:
** `php -S localhost:8000`

